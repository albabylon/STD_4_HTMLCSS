JavaScript — популярное расширение языка EСMAScript, который был создан для обработки действий на компьютерах пользователей.
Самая популярная и актуальная — ES6
JavaScript встроен почти в любой веб-браузер, и потому доступен почти на каждом вычислительном устройстве
Является интерпритируемым языком, а не компилируемым

1. Языки высокого и низкого уровней

!Языки низкого уровня
Языки низкого уровня (например assembler), обращается в своей программе непосредственно к ресурсам компьютера: процессору, памяти, периферийным устройствам. 
Это позволяет обеспечить высокую скорость работы программ, поскольку, в отличие от высокоуровневых языков, здесь отсутствуют скрытые фрагменты кода, 
добавляемые автоматически компилятором во время преобразования исходного текста в бинарный код.

Интерпретаторы, компиляторы, ассемблеры — это утилиты, с помощью которых исходный код транслируется в исполняемый машинный код. 
В браузере таким интерпретатором является движок.

!Языки высокого уровня
При написании программ с использованием высокоуровневых языков нет необходимости задумываться об архитектуре компьютера — необходимый уровень 
абстракции достигается за счёт скрытых от разработчика проверок и функциональности, которая позволяет не задумываться о таких вещах, 
как выделение памяти под переменные, предоставление пространства и другое.

Такие языки разработаны для быстроты и удобства использования. Основная черта высокоуровневых языков — это абстракция


2. Компилируемые и интерпретируемые языки

В компилируемых исходный код преобразуется компилятором в машинный код и записывается в файл, который затем исполняется
Если компилятор найдёт ошибки, то приложение не запустится.
Примеры: C++, Java.

Исходный код в интерпретируемых языках исполняется программой-интерпретатором. 
Код поставляется как есть — интерпретатор его выполняет, даже если есть ошибки.
Примеры: JavaScript.

Интерпретируется JavaScript специальным движком — это программа, выполняющая код. 
Движок может быть реализован с использованием различных подходов: в виде обычного интерпретатора, в виде динамического компилятора (или JIT-компилятора).
V8 — движок в Chrome и Node.js.


3. Типизированные и нетипизированные языки

Типизированные языки (typed) — это те, в которых существуют и используются разные типы данных, например, булевые значения, числа, строки и другие. 
Над этими данными выполняются соответствующие операции — математические над числами, конкатенация над строками и тд. 
Это такие языки, как C, Python, Scala, PHP и Lua, JavaScript

Бестиповые (untyped) — это низкоуровневые языки, работающие с машинным кодом (в них обработка данных происходит как операция над цепочкой битов). 
Представитель этой группы — язык ассемблера.

4. Языки со статической и динамической типизацией

Статическая типизация определяется тем, что конечные типы переменных и функций устанавливаются на этапе компиляции. 
То есть компилятор на 100% уверен, какой тип где находится, и переопределение невозможно. 

В динамической типизации все типы выясняются уже во время выполнения программы. 
То есть можно объявить переменную строкового типа, а затем записать в неё число. 
Интерпретатор на каждом этапе выполнения будет считывать новое значение и определять его тип.

5. Языки с сильной и слабой типизацией

Сильная типизация не позволяет смешивать в выражениях различные типы и не выполняет автоматические неявные преобразования. 
Например, нельзя вычесть из строки множество. 

Языки со слабой типизацией выполняют множество неявных преобразований автоматически, 
даже если может произойти потеря точности или преобразование неоднозначно


