Резюмируем
JavaScript — это интерпретируемый язык высокого уровня с динамической и слабой типизацией. 

Где и как запускать JavaScript 
Главный обработчик языка — браузер. Поэтому мы можем вести работу, например, в Google Chrome
Альтернатива разработки в браузере — текстовый редактор. Можно использовать Sublime или VScode.
Но для JavaScript больше подойдет рассмотренный WebStorm от компании Jetbrains


Подключение скриптов
Допустим, у вас есть HTML-документ. Подключение скриптов осуществляется с помощью тега <script>

src	Адрес файла, содержащего скрипт, для импорта в текущий документ.

async Логический атрибут. Указывает браузеру загружать скрипт асинхронно. 
Это означает, что указанный в атрибуте src файл будет выполняться без ожидания загрузки и отображения веб-страницы. 

defer Логический атрибут. Указывает браузеру, что следует отложить выполнение скрипта до тех пор, пока HTML-страница не будет загружена полностью.

type Определяет тип содержимого тега. В HTML5 атрибут перестал быть обязательным. По умолчанию равен text/javascript.


  <body>
    <h1>Hello, world!</h1>
    <script type="text/javascript">
      alert("Не пугайтесь! Просто нажмите кнопку ОК");
    </script>
  </body>


  Тут алерт не вызовется, так как есть src
  <script src="javascript.js">
    alert("!!! JavaScript !!!");
  </script>


Вставка JavaScript в HTML из отдельного файла
Чаще всего JavaScript подключают к HTML-странице путём импорта файла. Выглядеть это может вот так:

<!-- HTML4 -->
<script type="text/javascript" src="javascript.js"></script>

<!-- HTML5 -->
<script src="javascript.js"></script>

Браузер скачивает указанный скрипт только в первый раз, а в дальнейшем обычно берёт его из своего кеша. 
Страница при повторной загрузке выглядит более живой.

Как правило, вставкой JavaScript непосредственно в HTML-файл пользуются только для очень небольших скриптов, а сложные выносят в отдельный файл.

Если у нас есть несколько скриптов с атрибутом async, они могут выполняться в любом порядке. То, что первое загрузится, запустится в первую очередь.





-----------!!!JS!!!-------------

prompt() - Даёт JS возможность выводить специальное окно (pop-up), куда пользователь вводит какое-то значение
alert() - Используется для вывода результата обработки или любой другой информации на экран пользователя при помощи специального окна
console.log() - консоль

JavaScript определяет 8 встроенных типов данных:
null - Может принимать только значение null.
undefined - Переменная, которой не было присвоено значение, будет иметь значение undefined
boolean - Имеет два значения true или false.
number - общее для всех чисел, можно получить неточное число
string
symbol
object
bigInt - работать с целыми числами произвольной длины (более 16)

Все эти данные, кроме object, являются «простыми» или «примитивными»

В JavaScript есть так называемые встроенные, или глобальные объекты (built-in object). 
В их число входят объекты, эквивалентные типам данных с их методами и свойствами, например String или Object, и многие другие.

var - объявляет переменную (устаревшее)
let — объявляет локальную переменную в области видимости
const — объявляет именованную константу*. Значение доступно только для чтения

Отличия между let и const в том, что переменная, записанная через let, может быть изменена (будь то объект, или примитив).
Если переменная, записанная через const, примитив — её значение не может быть изменено. 
Если это объект, то свойства объекта могут быть изменены, а сам объект — нет.

Оператор typeof, с помощью которого можно моментально узнать о типе данных:
let a = 10;
typeof a; 
"number"

Инициализация переменной значением является необязательной
Переменные в JavaScript не имеют типа: переменной может быть присвоено значение любого типа 
и позднее этой же переменной может быть присвоено значение другого типа - динамическая типизация
*Константы — это переменные, которые не будут подвержены изменениям. Их принято писать заглавными буквами, разделяя нижним подчёркиванием.

Операторы сравнения
Равно (==) - Возвращает true, если операнды равны. Оператор сначала приводит операнды к одному типу, и затем применяет строгое сравнение.
Строго равно (===) - Возвращает true, если операнды строго равны и имеют одинаковый тип.
Текст сравнивается по количеству символов и совпадению символов на одинаковых местах